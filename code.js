// Generated by CoffeeScript 1.4.0
(function() {
  var Canvas, Food, Game, Snake, SnakeSegment;

  Canvas = (function() {

    Canvas.prototype.width = 600;

    Canvas.prototype.height = 400;

    function Canvas(background) {
      this.background = background != null ? background : 'white';
      this.canvas = document.getElementById('myCanvas');
      this.ctx = this.canvas.getContext('2d');
    }

    Canvas.prototype.clear = function() {
      this.ctx.fillStyle = this.background;
      return this.ctx.fillRect(0, 0, this.width, this.height);
    };

    return Canvas;

  })();

  Food = (function() {

    function Food(x, y, color, value) {
      this.x = x;
      this.y = y;
      this.color = color != null ? color : 'orange';
      this.value = value != null ? value : 3;
    }

    Food.prototype.paint = function(ctx) {
      ctx.fillStyle = this.color;
      return ctx.fillRect(this.x * 10, this.y * 10, 10, 10);
    };

    return Food;

  })();

  SnakeSegment = (function() {

    function SnakeSegment(x, y, next) {
      this.x = x;
      this.y = y;
      this.next = next != null ? next : null;
    }

    SnakeSegment.prototype.paint = function(ctx, color) {
      ctx.fillStyle = color;
      return ctx.fillRect(this.x * 10, this.y * 10, 10, 10);
    };

    return SnakeSegment;

  })();

  Snake = (function() {

    function Snake(direction, color) {
      var middle, tail;
      this.direction = direction != null ? direction : 'left';
      this.color = color != null ? color : 'green';
      tail = new SnakeSegment(12, 10);
      middle = new SnakeSegment(11, 10, tail);
      this.head = new SnakeSegment(10, 10, middle);
    }

    Snake.prototype.move = function() {
      var newHead, segment, _results;
      newHead = (function() {
        switch (this.direction) {
          case 'left':
            return new SnakeSegment(this.head.x - 1, this.head.y, this.head);
          case 'right':
            return new SnakeSegment(this.head.x + 1, this.head.y, this.head);
          case 'up':
            return new SnakeSegment(this.head.x, this.head.y - 1, this.head);
          case 'down':
            return new SnakeSegment(this.head.x, this.head.y + 1, this.head);
        }
      }).call(this);
      this.head = newHead;
      if (this.extra > 0) {
        this.extra--;
        return;
      }
      segment = this.head;
      _results = [];
      while (segment) {
        if (segment.next && !segment.next.next) {
          segment.next = null;
          break;
        }
        _results.push(segment = segment.next);
      }
      return _results;
    };

    Snake.prototype.paint = function(ctx) {
      var segment, _results;
      segment = this.head;
      _results = [];
      while (segment) {
        segment.paint(ctx, this.color);
        _results.push(segment = segment.next);
      }
      return _results;
    };

    return Snake;

  })();

  Game = (function() {

    function Game() {
      var processCallback;
      this.armKeyboard();
      this.canvas = new Canvas;
      this.canvas.clear();
      this.snake = new Snake;
      this.food = new Food(20, 20, 'orange', 10);
      processCallback = this.process.bind(this);
      setInterval(processCallback, 100);
    }

    Game.prototype.armKeyboard = function() {
      var _this = this;
      return document.addEventListener('keydown', function(e) {
        switch (e.keyCode) {
          case 37:
            return _this.snake.direction = 'left';
          case 39:
            return _this.snake.direction = 'right';
          case 38:
            return _this.snake.direction = 'up';
          case 40:
            return _this.snake.direction = 'down';
        }
      });
    };

    Game.prototype.checkCollision = function() {
      if (this.snake.head.x === this.food.x && this.snake.head.y === this.food.y) {
        console.log('eaten');
        return this.snake.extra = this.food.value;
      }
    };

    Game.prototype.process = function() {
      this.snake.move();
      this.canvas.clear();
      this.snake.paint(this.canvas.ctx);
      this.food.paint(this.canvas.ctx);
      return this.checkCollision();
    };

    return Game;

  })();

  window.start = function() {
    var game;
    return game = new Game;
  };

}).call(this);
